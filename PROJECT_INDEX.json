{"at":"2025-09-03T09:47:44.681050","root":".","tree":[".","\u251c\u2500\u2500 agents/ (6 files)","\u251c\u2500\u2500 coaching/ (7 files)","\u251c\u2500\u2500 docs/","\u251c\u2500\u2500 logs/","\u2502   \u2514\u2500\u2500 m1_maiden_voyage/","\u251c\u2500\u2500 orchestrator/ (3 files)","\u251c\u2500\u2500 outputs/","\u251c\u2500\u2500 sectionizer/ (4 files)","\u251c\u2500\u2500 tests/ (4 files)","\u251c\u2500\u2500 Zelda_Golden_Pipeline/","\u2514\u2500\u2500 README.md"],"stats":{"total_files":35,"total_directories":13,"fully_parsed":{"python":24},"listed_only":{"json":5,"sql":3,"shell":3},"markdown_files":25},"f":{"agents/agent_loader.py":["p",{"AgentRegistry":["10",["__init__:16:(self, registry_path:str = None):load_agents:","load_agents:25:(self)>Dict::Load agents from JSON file","get_agent:31:(self, agent_name:str)>Optional[Dict]::Get a specific agent configuration","get_agent_prompt:35:(self, agent_name:str)>Optional[str]:get_agent:Get the prompt for a specific agent","update_agent_prompt:40:(self, agent_name:str, new_prompt:str, coaching_note:str = \"\"):save_agents:Update an agent's prompt after coaching","save_agents:59:(self)::Save agents back to JSON file","get_all_agents:70:(self)>Dict::Get all agents","get_agents_by_priority:74:(self, priority:int)>Dict::Get agents with specific priority","generate_sql_inserts:82:(self)>str::Generate SQL to insert/update agents in PostgreSQL"]]}],"agents/golden_agents.py":["p",["generate_perfect_orchestrator:395:()::Generate the perfect orchestrator configuration with suppliers agent"]],"coaching/batch_phase1.py":["p",["setup_environment:19:()::Set up environment for Phase 1 coaching","get_database_connection:35:()::Get connection to PostgreSQL database","get_unprocessed_pdfs:45:(conn, limit:int = 50)>List[Dict]::Get first 50 PDFs that haven't been coached yet","process_pdf_with_coaching:67:(doc_id:str, file_path:str)>Dict::Process single PDF with aggressive coaching","track_phase_progress:127:(conn)::Track and display Phase 1 progress","display_dashboard:169:(metrics:Dict)::Display Phase 1 progress dashboard","main:194:():display_dashboard,get_database_connection,get_unprocessed_pdfs,process_pdf_with_coaching,setup_environment,track_phase_progress:Main Phase 1 batch processing"]],"coaching/card_g4_reinforced_coach.py":["p",["main:645:():analyze_performance:Test the Card G4 Reinforced Coach"],{"ExtractionPerformance":["20",[]],"CoachingDecision":["30",[]],"Card_G4_ReinforcedCoach":["38",["__init__:44:(self, db_config:Dict):_detect_learning_phase,load_performance_history:","_detect_learning_phase:80:(self)>int::Determine current learning phase based on PDFs processed","load_performance_history:99:(self)::Load performance memory from database","coach_extraction:112:(self, doc_id:str, agent_id:str, current_extraction:Dict, ground_truth:Optional[Dict] = None, session_id:Optional[str] = None)>Dict:_complete_coaching_session,_fail_coaching_session,_start_coaching_session,add_golden_example,analyze_performance,apply_coaching,get_historical_context,make_coaching_decision,store_learning_outcome:","analyze_performance:201:(self, extraction:Dict, ground_truth:Optional[Dict])>ExtractionPerformance:_calculate_accuracy,_calculate_coverage,_calculate_precision,_calculate_recall,_find_missing_fields,_identify_errors,_self_evaluate:Comprehensive performance analysis","_self_evaluate:227:(self, extraction:Dict)>ExtractionPerformance::Self-evaluation when no ground truth available","get_historical_context:257:(self, agent_id:str, doc_id:str)>Dict::Retrieve comprehensive historical performance data","make_coaching_decision:311:(self, agent_id:str, performance:ExtractionPerformance, context:Dict)>CoachingDecision:_apply_phase_constraints,_build_gemini_coaching_prompt,_fallback_decision:Intelligent coaching decision using Gemini 2.5 Pro","_build_gemini_coaching_prompt:372:(self, agent_id:str, performance:ExtractionPerformance, context:Dict)>str::Build comprehensive prompt for Gemini coaching"]]}],"coaching/card_g4_reinforced_coach_fixed.py":["p",["main:718:():analyze_performance:Test the Card G4 Reinforced Coach"],{"ExtractionPerformance":["21",[]],"CoachingDecision":["31",[]],"Card_G4_ReinforcedCoach":["39",["__init__:45:(self, db_config:Dict):_detect_learning_phase,load_performance_history:","_detect_learning_phase:81:(self)>int::Determine current learning phase based on PDFs processed","load_performance_history:104:(self)::Load performance memory from database","coach_extraction:121:(self, doc_id:str, agent_id:str, current_extraction:Dict, ground_truth:Optional[Dict] = None, session_id:Optional[str] = None)>Dict:_complete_coaching_session,_fail_coaching_session,_start_coaching_session,add_golden_example,analyze_performance,apply_coaching,get_historical_context,make_coaching_decision,store_learning_outcome:","analyze_performance:211:(self, extraction:Dict, ground_truth:Optional[Dict])>ExtractionPerformance:_calculate_accuracy,_calculate_coverage,_calculate_precision,_calculate_recall,_find_missing_fields,_identify_errors,_self_evaluate:Comprehensive performance analysis","_self_evaluate:237:(self, extraction:Dict)>ExtractionPerformance::Self-evaluation when no ground truth available","get_historical_context:279:(self, agent_id:str, doc_id:str)>Dict::Retrieve comprehensive historical performance data","make_coaching_decision:341:(self, agent_id:str, performance:ExtractionPerformance, context:Dict)>CoachingDecision:_apply_phase_constraints,_build_gemini_coaching_prompt,_fallback_decision:Intelligent coaching decision using Gemini 2.5 Pro","_build_gemini_coaching_prompt:402:(self, agent_id:str, performance:ExtractionPerformance, context:Dict)>str::Build comprehensive prompt for Gemini coaching"]]}],"coaching/coaching_monitor.py":["p",["get_database_connection:13:()::Get connection to PostgreSQL database","get_learning_phase:23:(conn)>Tuple[int, str]::Get current learning phase","get_overall_metrics:38:(conn)>Dict::Get overall coaching metrics","get_agent_performance:62:(conn)>List[Dict]::Get performance by agent","get_recent_sessions:94:(conn, limit:int = 5)>List[Dict]::Get recent coaching sessions","get_golden_examples_count:127:(conn)>Dict::Get golden examples statistics","get_convergence_status:146:(conn)>List[Dict]::Get agent convergence status","display_dashboard:172:(conn):get_agent_performance,get_convergence_status,get_golden_examples_count,get_learning_phase,get_overall_metrics,get_recent_sessions:Display comprehensive coaching dashboard","main:247:():display_dashboard,get_database_connection:Main monitoring loop"]],"coaching/test_coaching_integration.py":["p",["test_coaching_initialization:15:()::Test that coaching system initializes properly","test_performance_analysis:52:()::Test performance analysis functionality","test_coaching_decision:106:()::Test coaching decision making","test_orchestrator_integration:167:()::Test orchestrator with coaching integration","test_learning_phase_detection:212:()::Test learning phase detection","main:259:()::Run all tests"]],"final_verification.py":["p",["verify_golden_pipeline:9:()::Final comprehensive verification"]],"h100_native_maiden_voyage.py":["p",["main:431:():run_voyage,setup:Main entry point for H100 execution"],{"H100Environment":["24",["setup:28:()::Setup H100-specific environment"]],"DatabaseManager":["60",["__init__:63:(self):setup_pool:","setup_pool:67:(self)::Create connection pool","get_connection:82:(self)::Get connection from pool with auto-rollback on error","return_connection:95:(self, conn)::Return connection to pool","fix_tables:104:(self):get_connection,return_connection:Fix database tables and clear errors"]],"H100MaidenVoyage":["171",["__init__:174:(self):setup_logging:","setup_logging:185:(self)::Setup comprehensive logging","test_database_connection:206:(self)>bool:get_connection,return_connection:Test database connectivity","test_twin_pipeline_integration:235:(self)>bool::Test twin-pipeline Card G4 with proper DB connection","test_golden_patterns:277:(self)>bool::Test Golden patterns integration","test_unified_system:310:(self)>bool::Test the complete unified system","run_voyage:350:(self)>Dict:fix_tables:Execute complete H100 maiden voyage"]]}],"m1_golden_fortress_voyage.py":["p",["main:374:():generate_report,run_comprehensive_test:Execute Golden Fortress Voyage"],{"GoldenFortressVoyage":["35",["__init__:38:(self)::","run_comprehensive_test:44:(self)>Dict::Execute complete golden fortress test","test_environment:105:(self)>tuple[bool, Dict]::Test environment configuration","test_golden_sectionizer:119:(self)>tuple[bool, Dict]::Test Golden Sectionizer with 29 patterns","test_twin_transport:147:(self)>tuple[bool, Dict]::Test Twin-Pipeline transport (HF-Direct or Ollama)","test_database:181:(self)>tuple[bool, Dict]::Test database connection","test_card_g4_coaching:227:(self)>tuple[bool, Dict]::Test Card G4 Reinforced Learning Coach","test_agent_registry:264:(self)>tuple[bool, Dict]::Test 16-agent registry","test_integration:301:(self)>tuple[bool, Dict]::Test integration between systems","generate_report:331:(self, results:Dict)>str::Generate comprehensive test report"]]}],"m1_maiden_voyage.py":["p",["setup_comprehensive_logging:35:()>logging.Logger::Set up multi-handler logging system","measure_performance:106:(component_name:str):decorator,wrapper:Decorator to measure function performance","main:654:():run_voyage,setup_comprehensive_logging:Main entry point for maiden voyage"],{"MaidenVoyageOrchestrator":["158",["__init__:161:(self)::","initialize_system:170:(self)>bool::Initialize all system components","connect_database:197:(self)>bool::Establish database connection","load_orchestrator:251:(self)>bool::Load Golden Orchestrator with Card G4 coaching","load_test_pdf:281:(self)>bool::Load test PDF for processing","run_sectionizer:308:(self)>List[Dict]::Run enhanced sectionizer on document","map_sections_to_agents:348:(self, sections:List[Dict])>Dict:map_sections_to_agents:Map sections to appropriate agents","run_extraction_with_coaching:375:(self, assignments:Dict)>Dict:_simulate_extraction:Run agents with Card G4 coaching","_simulate_extraction:476:(self, agent_name:str)>Dict::Simulate extraction for testing","store_results:502:(self, results:Dict)>bool::Store results in database and files","run_voyage:567:(self)>Dict:map_sections_to_agents,run_extraction_with_coaching,run_sectionizer,store_results:Execute the complete maiden voyage"]]}],"m1_unified_voyage.py":["p",["main:265:():run_voyage:Main entry point"],{"UnifiedVoyage":["28",["__init__:31:(self)::","find_test_pdf:40:(self)>str::Find a test PDF to use","test_golden_sectionizer:56:(self)>bool::Test Golden Sectionizer with 29 patterns","test_card_g4_coaching:86:(self)>bool::Test Card G4 Reinforced Learning","test_unified_coach:126:(self)>bool::Test Unified Coach integration","test_agent_registry:162:(self)>bool::Test 16-agent registry","run_voyage:196:(self)>Dict:find_test_pdf:Execute the complete unified voyage"]]}],"orchestrator/golden_orchestrator.py":["p",["main:441:():generate_coaching_feedback,generate_execution_plan,generate_test_scenario,learn_from_failure,map_sections_to_agents:Test the intelligent orchestrator"],{"GoldenOrchestrator":["12",["__init__:21:(self, db_config:Optional[Dict] = None):_init_dependencies,_init_validation_rules:","_init_validation_rules:37:(self)>Dict::Define validation rules for agent outputs","_init_dependencies:66:(self)>Dict::Define agent dependencies and relationships","map_sections_to_agents:96:(self, sections:List[Dict])>Dict[str, Dict]:_add_learning_hints,_get_agent_priority,_get_expected_fields,map_sections_to_agents:","_get_agent_priority:133:(self, agent_name:str)>int::Get execution priority for agent","_get_expected_fields:155:(self, agent_name:str)>List[str]::Get expected output fields for validation","_add_learning_hints:169:(self, assignments:Dict)::Add hints from previous learning to improve extraction","validate_agent_output:178:(self, agent_name:str, output:Dict, expected_fields:List[str])>Tuple[bool, List[str]]:_apply_validation_rule:","_apply_validation_rule:213:(self, output:Dict, rule:Dict)>bool::Apply a specific validation rule","learn_from_failure:235:(self, agent_name:str, issues:List[str], section_content:str = \"\")>Dict:_generate_hint_from_learning:","_generate_hint_from_learning:290:(self, learning_entry:Dict)>Optional[str]::Generate actionable hint from learning entry","cross_validate_agents:297:(self, results:Dict[str, Dict])>List[Dict]::","generate_execution_plan:335:(self, assignments:Dict)>List[List[str]]::","process_with_coaching:358:(self, doc_id:str, agent_name:str, extraction:Dict, ground_truth:Optional[Dict] = None)>Dict::","generate_coaching_feedback:384:(self, agent_name:str, issues:List[str])>str::"]]}],"run_golden_pipeline.py":["p",["main:15:()::"]],"sectionizer/golden_sectionizer.py":["p",["generate_sectionizer_config:224:():get_discovery_prompt:Generate configuration for enhanced sectionizer"],{"GoldenSectionizer":["9",["__init__:14:(self)::","get_discovery_prompt:103:(self, focus_suppliers=False)>str::Get discovery prompt for Pass 1"]]}],"sectionizer/golden_two_pass_sectionizer.py":["p",["main:492:():section_pdf:Test the golden sectionizer"],{"GoldenTwoPassSectionizer":["20",["__init__:27:(self, db_config:Optional[Dict] = None)::","section_pdf:70:(self, pdf_path:str, doc_id:str = None)>Dict[str, Any]:_format_output,_identify_main_sections,_pass1_discovery,_pass2_verification,_store_in_postgresql:","_pass1_discovery:121:(self, pdf_path:str, total_pages:int)>List[Dict]::"]]}],"t/comprehensive_test.py":["p",["test_sectionizer:10:()::Test enhanced sectionizer with suppliers detection","test_mapping_logic:55:()::Test intelligent mapping and prioritization","test_learning_capabilities:108:()::Test learning from failures and coaching generation","test_validation_and_cross_checking:172:()::Test validation rules and cross-agent validation","test_execution_planning:254:()::Test execution batch planning","main:314:()::Run all tests"]],"t/golden_mega_test.py":["p",["main:473:():run_all_tests:Main entry point"],{"MegaOrchestratorTest":["24",["__init__:27:(self):save_progress:","save_progress:36:(self)::Save current progress to file for async checking","log_test_start:41:(self, test_name):save_progress:Log start of a test section","log_test_complete:53:(self, test_name, success, details=None):save_progress:Log completion of a test section","test_1_sectionizer:63:(self):log_test_complete,log_test_start:Test 1: Enhanced Sectionizer with Suppliers","test_2_mapping_logic:110:(self):log_test_complete,log_test_start:Test 2: Intelligent Mapping and Extraction Zones","test_3_learning_system:168:(self):log_test_complete,log_test_start:Test 3: Autonomous Learning and Coaching","test_4_validation:214:(self):log_test_complete,log_test_start:Test 4: Validation Rules and Cross-Checking","test_5_execution_planning:262:(self):log_test_complete,log_test_start:Test 5: Execution Planning with H100 Constraints","test_6_integration:320:(self):log_test_complete,log_test_start:Test 6: Full Integration Test","run_all_tests:407:(self):save_progress:Run all tests in sequence"]]}],"t/test_card_g4_comprehensive.py":["p",["run_coverage_report:709:()::Generate test coverage report"],{"TestCardG4ReinforcedCoach":["28",["setUp:31:(self)::Set up test fixtures","test_initialization:52:(self, mock_genai, mock_connect)::Test coach initialization","test_phase_detection:64:(self, mock_connect)::Test learning phase detection based on PDF count","test_performance_analysis_with_ground_truth:89:(self, mock_connect)::Test performance analysis with ground truth","test_performance_analysis_without_ground_truth:121:(self, mock_connect)::Test self-evaluation when no ground truth available","test_coaching_decision_strategies:143:(self, mock_connect)::Test different coaching decision strategies","test_phase_constraints_application:176:(self, mock_connect)::Test that phase constraints are properly applied","test_golden_example_detection:213:(self, mock_connect)::Test that golden examples are detected and stored","test_gemini_integration_with_retry:244:(self, mock_gemini_class, mock_connect)::Test Gemini API integration with retry logic","test_coaching_session_lifecycle:287:(self, mock_connect)::Test complete coaching session lifecycle","test_historical_context_retrieval:324:(self, mock_connect)::Test retrieval of historical performance context"]],"TestEdgeCases":["353",["test_empty_extraction_handling:357:(self, mock_connect)::Test handling of empty or None extractions","test_database_connection_failure:383:(self, mock_connect)::Test handling of database connection failures","test_gemini_complete_failure:392:(self, mock_gemini_class, mock_connect)::Test fallback when Gemini completely fails","test_accuracy_regression_detection:424:(self, mock_connect)::Test detection of accuracy regression","test_stuck_at_local_maximum:457:(self, mock_connect)::Test detection of being stuck at local maximum"]],"TestPerformanceAndMemory":["494",["test_coaching_execution_time:498:(self, mock_connect)::Test that coaching completes within 30 seconds","test_database_query_performance:521:(self, mock_connect)::Test that database queries are efficient","test_memory_usage_with_large_extractions:546:(self, mock_connect)::Test memory usage stays reasonable with large extractions"]],"TestIntegrationWithOrchestrator":["574",["test_orchestrator_coaching_integration:579:(self, mock_coach_connect, mock_orch_connect)::Test that orchestrator properly integrates with coaching","test_batch_phase1_processing:615:(self, mock_connect)::Test batch processing for Phase 1"]],"TestDatabaseTransactionIntegrity":["645",["test_transaction_rollback_on_error:649:(self, mock_connect)::Test that transactions rollback on error","test_concurrent_coaching_sessions:682:(self, mock_connect)::Test handling of concurrent coaching sessions"]]}]},"g":[["MegaOrchestratorTest.test_6_integration","log_test_complete"],["Card_G4_ReinforcedCoach.analyze_performance","Card_G4_ReinforcedCoach._self_evaluate"],["main","GoldenOrchestrator.generate_execution_plan"],["GoldenTwoPassSectionizer.section_pdf","_identify_main_sections"],["Card_G4_ReinforcedCoach.analyze_performance","_calculate_precision"],["GoldenTwoPassSectionizer.section_pdf","_format_output"],["AgentRegistry.update_agent_prompt","AgentRegistry.save_agents"],["H100MaidenVoyage.test_database_connection","DatabaseManager.get_connection"],["main","setup_comprehensive_logging"],["GoldenOrchestrator.validate_agent_output","_apply_validation_rule"],["MegaOrchestratorTest.test_2_mapping_logic","MegaOrchestratorTest.log_test_complete"],["main","GoldenOrchestrator.map_sections_to_agents"],["MegaOrchestratorTest.test_2_mapping_logic","log_test_start"],["main","GoldenOrchestrator.learn_from_failure"],["UnifiedVoyage.run_voyage","UnifiedVoyage.find_test_pdf"],["MaidenVoyageOrchestrator.run_extraction_with_coaching","MaidenVoyageOrchestrator._simulate_extraction"],["main","GoldenFortressVoyage.generate_report"],["MegaOrchestratorTest.log_test_complete","MegaOrchestratorTest.save_progress"],["main","GoldenOrchestrator.generate_coaching_feedback"],["Card_G4_ReinforcedCoach.coach_extraction","apply_coaching"],["AgentRegistry.get_agent_prompt","get_agent"],["GoldenOrchestrator.map_sections_to_agents","GoldenOrchestrator._get_expected_fields"],["main","section_pdf"],["Card_G4_ReinforcedCoach.analyze_performance","_calculate_recall"],["main","display_dashboard"],["GoldenOrchestrator.validate_agent_output","GoldenOrchestrator._apply_validation_rule"],["H100MaidenVoyage.run_voyage","DatabaseManager.fix_tables"],["H100MaidenVoyage.__init__","setup_logging"],["Card_G4_ReinforcedCoach.coach_extraction","Card_G4_ReinforcedCoach.analyze_performance"],["MaidenVoyageOrchestrator.run_voyage","run_sectionizer"],["MegaOrchestratorTest.test_3_learning_system","log_test_start"],["GoldenOrchestrator.map_sections_to_agents","_get_agent_priority"],["Card_G4_ReinforcedCoach.coach_extraction","analyze_performance"],["MegaOrchestratorTest.test_1_sectionizer","MegaOrchestratorTest.log_test_start"],["MegaOrchestratorTest.__init__","MegaOrchestratorTest.save_progress"],["MegaOrchestratorTest.test_5_execution_planning","log_test_start"],["main","run_all_tests"],["DatabaseManager.fix_tables","DatabaseManager.get_connection"],["main","GoldenTwoPassSectionizer.section_pdf"],["Card_G4_ReinforcedCoach.__init__","Card_G4_ReinforcedCoach._detect_learning_phase"],["MaidenVoyageOrchestrator.run_voyage","map_sections_to_agents"],["GoldenOrchestrator.map_sections_to_agents","GoldenOrchestrator.map_sections_to_agents"],["main","H100MaidenVoyage.run_voyage"],["main","get_unprocessed_pdfs"],["main","H100Environment.setup"],["main","GoldenFortressVoyage.run_comprehensive_test"],["main","generate_coaching_feedback"],["MegaOrchestratorTest.test_1_sectionizer","log_test_complete"],["generate_sectionizer_config","GoldenSectionizer.get_discovery_prompt"],["AgentRegistry.__init__","AgentRegistry.load_agents"],["main","run_voyage"],["MaidenVoyageOrchestrator.map_sections_to_agents","map_sections_to_agents"],["MegaOrchestratorTest.test_4_validation","log_test_start"],["AgentRegistry.get_agent_prompt","AgentRegistry.get_agent"],["DatabaseManager.__init__","DatabaseManager.setup_pool"],["H100MaidenVoyage.run_voyage","fix_tables"],["MegaOrchestratorTest.test_3_learning_system","log_test_complete"],["measure_performance","wrapper"],["Card_G4_ReinforcedCoach.analyze_performance","_find_missing_fields"],["GoldenOrchestrator.__init__","_init_validation_rules"],["MegaOrchestratorTest.log_test_start","MegaOrchestratorTest.save_progress"],["MegaOrchestratorTest.test_5_execution_planning","log_test_complete"],["generate_sectionizer_config","get_discovery_prompt"],["MaidenVoyageOrchestrator.map_sections_to_agents","GoldenOrchestrator.map_sections_to_agents"],["display_dashboard","get_learning_phase"],["H100MaidenVoyage.test_database_connection","return_connection"],["main","learn_from_failure"],["main","MaidenVoyageOrchestrator.run_voyage"],["MegaOrchestratorTest.run_all_tests","MegaOrchestratorTest.save_progress"],["main","setup_environment"],["GoldenOrchestrator.__init__","GoldenOrchestrator._init_dependencies"],["display_dashboard","get_recent_sessions"],["MegaOrchestratorTest.test_2_mapping_logic","MegaOrchestratorTest.log_test_start"],["MaidenVoyageOrchestrator.run_extraction_with_coaching","_simulate_extraction"],["GoldenTwoPassSectionizer.section_pdf","_pass1_discovery"],["GoldenOrchestrator.map_sections_to_agents","map_sections_to_agents"],["main","MaidenVoyageOrchestrator.map_sections_to_agents"],["MegaOrchestratorTest.log_test_start","save_progress"],["MegaOrchestratorTest.log_test_complete","save_progress"],["Card_G4_ReinforcedCoach.make_coaching_decision","_fallback_decision"],["MegaOrchestratorTest.test_4_validation","log_test_complete"],["main","generate_execution_plan"],["Card_G4_ReinforcedCoach.analyze_performance","_calculate_accuracy"],["MaidenVoyageOrchestrator.run_voyage","MaidenVoyageOrchestrator.run_sectionizer"],["Card_G4_ReinforcedCoach.__init__","Card_G4_ReinforcedCoach.load_performance_history"],["Card_G4_ReinforcedCoach.coach_extraction","_start_coaching_session"],["MegaOrchestratorTest.test_3_learning_system","MegaOrchestratorTest.log_test_start"],["H100MaidenVoyage.test_database_connection","DatabaseManager.return_connection"],["GoldenTwoPassSectionizer.section_pdf","_store_in_postgresql"],["MegaOrchestratorTest.test_2_mapping_logic","log_test_complete"],["DatabaseManager.fix_tables","return_connection"],["MegaOrchestratorTest.test_5_execution_planning","MegaOrchestratorTest.log_test_start"],["MegaOrchestratorTest.__init__","save_progress"],["Card_G4_ReinforcedCoach.coach_extraction","get_historical_context"],["GoldenOrchestrator.learn_from_failure","_generate_hint_from_learning"],["main","get_database_connection"],["AgentRegistry.__init__","load_agents"],["MegaOrchestratorTest.test_6_integration","MegaOrchestratorTest.log_test_complete"],["MaidenVoyageOrchestrator.run_voyage","run_extraction_with_coaching"],["UnifiedVoyage.run_voyage","find_test_pdf"],["MegaOrchestratorTest.test_6_integration","log_test_start"],["main","MegaOrchestratorTest.run_all_tests"],["AgentRegistry.update_agent_prompt","save_agents"],["GoldenOrchestrator.map_sections_to_agents","GoldenOrchestrator._add_learning_hints"],["MegaOrchestratorTest.test_4_validation","MegaOrchestratorTest.log_test_start"],["H100MaidenVoyage.test_database_connection","get_connection"],["DatabaseManager.fix_tables","DatabaseManager.return_connection"],["MaidenVoyageOrchestrator.run_voyage","MaidenVoyageOrchestrator.map_sections_to_agents"],["Card_G4_ReinforcedCoach.__init__","load_performance_history"],["Card_G4_ReinforcedCoach.coach_extraction","make_coaching_decision"],["display_dashboard","get_golden_examples_count"],["Card_G4_ReinforcedCoach.make_coaching_decision","_build_gemini_coaching_prompt"],["GoldenOrchestrator.__init__","_init_dependencies"],["MaidenVoyageOrchestrator.run_voyage","MaidenVoyageOrchestrator.store_results"],["MaidenVoyageOrchestrator.run_voyage","store_results"],["MaidenVoyageOrchestrator.map_sections_to_agents","MaidenVoyageOrchestrator.map_sections_to_agents"],["Card_G4_ReinforcedCoach.analyze_performance","_calculate_coverage"],["main","track_phase_progress"],["main","generate_report"],["main","process_pdf_with_coaching"],["MegaOrchestratorTest.run_all_tests","save_progress"],["display_dashboard","get_agent_performance"],["Card_G4_ReinforcedCoach.coach_extraction","_fail_coaching_session"],["GoldenOrchestrator.map_sections_to_agents","_get_expected_fields"],["main","run_comprehensive_test"],["DatabaseManager.fix_tables","get_connection"],["display_dashboard","get_overall_metrics"],["Card_G4_ReinforcedCoach.coach_extraction","store_learning_outcome"],["Card_G4_ReinforcedCoach.__init__","_detect_learning_phase"],["Card_G4_ReinforcedCoach.make_coaching_decision","Card_G4_ReinforcedCoach._build_gemini_coaching_prompt"],["main","Card_G4_ReinforcedCoach.analyze_performance"],["display_dashboard","get_convergence_status"],["GoldenTwoPassSectionizer.section_pdf","GoldenTwoPassSectionizer._pass1_discovery"],["main","analyze_performance"],["MaidenVoyageOrchestrator.run_voyage","MaidenVoyageOrchestrator.run_extraction_with_coaching"],["measure_performance","decorator"],["GoldenOrchestrator.learn_from_failure","GoldenOrchestrator._generate_hint_from_learning"],["MegaOrchestratorTest.test_1_sectionizer","MegaOrchestratorTest.log_test_complete"],["MegaOrchestratorTest.test_1_sectionizer","log_test_start"],["GoldenOrchestrator.map_sections_to_agents","MaidenVoyageOrchestrator.map_sections_to_agents"],["GoldenOrchestrator.map_sections_to_agents","GoldenOrchestrator._get_agent_priority"],["main","setup"],["Card_G4_ReinforcedCoach.make_coaching_decision","_apply_phase_constraints"],["GoldenOrchestrator.__init__","GoldenOrchestrator._init_validation_rules"],["GoldenTwoPassSectionizer.section_pdf","_pass2_verification"],["MegaOrchestratorTest.test_3_learning_system","MegaOrchestratorTest.log_test_complete"],["main","UnifiedVoyage.run_voyage"],["main","generate_test_scenario"],["MegaOrchestratorTest.test_5_execution_planning","MegaOrchestratorTest.log_test_complete"],["Card_G4_ReinforcedCoach.coach_extraction","_complete_coaching_session"],["Card_G4_ReinforcedCoach.coach_extraction","Card_G4_ReinforcedCoach.get_historical_context"],["MegaOrchestratorTest.test_6_integration","MegaOrchestratorTest.log_test_start"],["Card_G4_ReinforcedCoach.analyze_performance","_self_evaluate"],["H100MaidenVoyage.__init__","H100MaidenVoyage.setup_logging"],["Card_G4_ReinforcedCoach.coach_extraction","add_golden_example"],["GoldenOrchestrator.map_sections_to_agents","_add_learning_hints"],["Card_G4_ReinforcedCoach.analyze_performance","_identify_errors"],["DatabaseManager.__init__","setup_pool"],["main","map_sections_to_agents"],["MegaOrchestratorTest.test_4_validation","MegaOrchestratorTest.log_test_complete"],["MaidenVoyageOrchestrator.run_voyage","GoldenOrchestrator.map_sections_to_agents"],["Card_G4_ReinforcedCoach.coach_extraction","Card_G4_ReinforcedCoach.make_coaching_decision"]],"d":{"docs/MD0_AMNESIA_RECOVERY.md":["\ud83e\udde0 MD0: AMNESIA RECOVERY PROTOCOL - GOLDEN FORTRESS","**START HERE - This Is Your Entry Point**","\ud83d\udccb **IMMEDIATE RECOVERY STEPS**","**Step 1: Understand What You Built**","**Step 2: Read Documentation Chain (IN THIS EXACT ORDER)**","From /private/tmp/Golden_Orchestrator_Pipeline/docs/","**Step 3: Check Current Status**","\ud83c\udfaf **CRITICAL CONTEXT**","**System Locations**","**Key Achievement Status**"],"CARD_G4_IMPLEMENTATION_SUMMARY.md":["\ud83c\udfaf CARD G4 REINFORCED LEARNING - IMPLEMENTATION SUMMARY","Complete Guide for Clean Context Implementation","\ud83d\udccb **CRITICAL: READ ORDER**","\ud83e\udde0 **THE VISION**","**Key Innovation: Reinforced Learning with Memory**","\ud83c\udfd7\ufe0f **ARCHITECTURE OVERVIEW**","\ud83d\ude80 **QUICK IMPLEMENTATION STEPS**","**Phase 0: Setup (Day 1)**","1. SSH to H100","2. Create database schema"],"CARD_G4_IMPROVEMENTS.md":["Card G4 Reinforced Learning System - Improvements & Recommendations","Overview","\ud83d\udd34 Critical Issues (Must Fix Before Production)","1. Database Transaction Management","2. Null Safety Enhancements","3. Connection Pool Implementation","\ud83d\udfe1 Performance Optimizations","1. Async Gemini Integration","2. Caching Layer","3. Batch Database Operations"],"CARD_G4_TEST_REPORT.md":["Card G4 Reinforced Learning System - Comprehensive Test Report","Executive Summary","Test Results Overview","\u2705 Passing Tests (12/22)","\u274c Failed Tests (10/22)","Critical Bugs Identified & Fixed","\ud83d\udc1b Bug 1: Null Pointer Exceptions","\ud83d\udc1b Bug 2: AttributeError in Gemini Prompt Building","\ud83d\udc1b Bug 3: Database Table Existence","\ud83d\udc1b Bug 4: Empty Extraction Self-Evaluation"],"CLAUDE_CLEAN_CONTEXT_INSTRUCTIONS.md":["\ud83d\udccb CLAUDE INSTRUCTIONS - CLEAN CONTEXT","\ud83c\udfaf YOUR IMMEDIATE TASK","Navigate to the Golden directory","Verify structure","Run the complete test","\ud83d\udcc1 SELF-CONTAINED GOLDEN STRUCTURE","\u2705 WHAT THIS SYSTEM DOES","16 Essential Agents (NO signature, ToC, legal, summary)","Key Features","\ud83e\uddea EXPECTED TEST RESULTS"],"CLAUDE_H100_INSTRUCTIONS.md":["\ud83d\udcdc CLAUDE H100 INSTRUCTIONS - GOLDEN FORTRESS SYSTEM","Quick Reference - Read the Quadruple MD Chain for Complete Details","\ud83c\udfaf START HERE - THE QUADRUPLE MD CHAIN","\u2705 CRITICAL FIX APPLIED (Sept 3, 2025)","\u274c WRONG (caused 75% success)","\u2705 FIXED (now 100% success)","\ud83d\ude80 QUICK START - RUN THE MAIDEN VOYAGE","1. SSH to H100","2. Navigate to Golden Orchestrator","3. Run H100-native voyage (with fix applied)"],"FINAL_CLEAN_INSTRUCTIONS.md":["\ud83c\udfc6 GOLDEN ORCHESTRATOR PIPELINE - FINAL CLEAN INSTRUCTIONS","\u2705 VERIFIED STATUS: CLEAN AND READY","\ud83d\ude80 YOUR SINGLE COMMAND TO RUN","\u2705 WHAT'S BEEN VERIFIED","\ud83d\udcc1 THE GOLDEN STRUCTURE","\ud83c\udfaf WHAT THIS SYSTEM DOES","\ud83d\udcca EXPECTED TEST RESULTS","\u26a0\ufe0f CRITICAL REMINDERS","\ud83d\udd12 THIS IS THE VERIFIED GOLDEN VERSION","\ud83d\udcc8 PRODUCTION READY FOR"],"FINAL_INSTRUCTIONS_AND_CLOSEOUT.md":["\ud83c\udfaf FINAL INSTRUCTIONS & CLOSEOUT ROUTINE - GOLDEN FORTRESS","Complete Synchronization and Maiden Voyage Launch Protocol","\ud83d\udccb CLOSEOUT CHECKLIST","\u2705 Repository Synchronization","\u2705 Documentation Status","\ud83d\udd04 SYNCHRONIZATION ROUTINE","Daily Sync Protocol","1. LOCAL \u2192 GITHUB","2. LOCAL \u2192 H100","3. H100 \u2192 GIT (on H100)"],"GOLDEN_FORTRESS_ARCHITECTURE.md":["\ud83c\udff0 GOLDEN FORTRESS ARCHITECTURE - UNIFIED SYSTEM","Integrating Best of Golden Orchestrator + Twin-Pipeline","\ud83c\udfaf CURRENT SITUATION - TWO PARALLEL SYSTEMS","1. **Golden Orchestrator Pipeline** (Sept 2, Local)","2. **Twin-Pipeline** (Aug 28-31, Production)","\ud83c\udfd7\ufe0f THE GOLDEN FORTRESS - BEST OF BOTH WORLDS","What We Keep from Golden Orchestrator:","What We Keep from Twin-Pipeline:","\ud83d\udcd0 UNIFIED ARCHITECTURE","\ud83d\ude80 INTEGRATION PLAN"],"LAUNCH_M1_MAIDEN_VOYAGE.md":["\ud83d\ude80 READY FOR M1 MAIDEN VOYAGE","\u2705 **EVERYTHING IS PREPARED**","**What We've Built:**","**What M1 Will Test:**","**Success Criteria:**","\ud83c\udfac **LAUNCH SEQUENCE**","1. Navigate to pipeline directory","2. Run the maiden voyage","3. Monitor logs in real-time (in another terminal)","4. Check results"],"PRODUCTION_READY_SUMMARY.md":["\ud83c\udfc6 GOLDEN ORCHESTRATOR PIPELINE - PRODUCTION READY","\u2705 FINAL VERIFICATION COMPLETE","\ud83d\udcca VERIFICATION RESULTS","\ud83c\udfaf KEY ACHIEVEMENTS","1. **JSON-Based Agent Registry**","2. **Complete Agent Set (16 Total)**","3. **Verified Features**","4. **Production Deployment**","\ud83d\udcc1 FINAL STRUCTURE","\ud83d\ude80 PRODUCTION COMMANDS"],"README.md":["\ud83c\udfc6 Golden Orchestrator Pipeline","\ud83e\udde0 NEW: Card G4 Reinforced Learning System","**Documentation Chain** (Read in Order):","Structure","Quick Start","Key Features","Status"],"VERIFIED_INSTRUCTIONS.md":["\ud83c\udfc6 GOLDEN ORCHESTRATOR PIPELINE - VERIFIED CLEAN STATE","\u2705 SYSTEM STATUS: VERIFIED AND READY","\ud83d\ude80 QUICK START","\ud83d\udcc1 VERIFIED STRUCTURE","\ud83c\udfaf KEY FEATURES VERIFIED","\ud83d\udcca EXPECTED TEST OUTPUT","\u26a0\ufe0f CRITICAL CLASS NAMES (HARMONIZED)","\ud83d\udd12 THIS IS THE GOLDEN VERSION"],"docs/CARD_G3_COMPLETE.md":["\ud83c\udfaf CARD G3: INTELLIGENT ORCHESTRATOR - COMPLETE","Executive Summary","\ud83d\udcca Document Structure Analysis","Typical Swedish BRF Annual Report Structure","\ud83e\udd16 Specialized Agents (10 Total)","Priority 1 Agents (Critical - Run First)","Priority 2 Agents (Important)","Priority 3 Agents (Supporting)","Priority 4 Agents (Final)","\ud83d\udcca Specialized Table Extractors (4 Total)"],"docs/CARD_G5_COLLECTIVE_INTELLIGENCE.md":["\ud83e\uddec CARD G5: COLLECTIVE SUPERINTELLIGENCE SYSTEM","Beyond Individual Learning - The Neural Agent Network Revolution","\ud83d\udccb **EXECUTIVE SUMMARY**","\ud83d\udd0d **THE GAPS IN CARD G4**","What We're Missing:","\ud83d\ude80 **CARD G5 ARCHITECTURE**","**1. Neural Agent Network (NAN)**","**2. Predictive Coaching Engine (PCE)**","**3. Document DNA Profiler**"],"docs/CLAUDE_INSTRUCTIONS.md":["\ud83d\udccb INSTRUCTION FOR CLAUDE AFTER CONTEXT CLEANSE","\ud83d\ude80 YOUR IMMEDIATE TASK","First, verify you're in the right location","If files are present, run the mega test:","Monitor progress","Check status","\ud83d\udcc1 FILE LOCATIONS","Core Files:","Output Files (created by test):","\ud83c\udfaf WHAT WE BUILT"],"docs/COMPLETE_SYSTEM.md":["\ud83c\udfaf MEGA ORCHESTRATOR SYSTEM - COMPLETE IMPLEMENTATION GUIDE","\ud83d\udccb QUICK START - RUN THE BIG TEST","1. Start the test in background","2. Check status","3. Check if still running","4. View results when done","\ud83c\udfd7\ufe0f COMPLETE SYSTEM ARCHITECTURE","**16 ESSENTIAL AGENTS** (No signature, ToC, legal, summary)","\ud83d\udcdd PERFECT PROMPTS FOR EACH AGENT","**governance_agent**"],"docs/DESIGN_SUMMARY.md":["\ud83c\udfaf INTELLIGENT LEARNING ORCHESTRATOR - FINAL DESIGN","Executive Summary","\ud83d\udd27 Core Components","1. Enhanced Sectionizer (`enhanced_sectionizer_with_suppliers.py`)","2. Intelligent Mapping Logic","3. Autonomous Learning System","4. Validation & Cross-Checking","Balance Sheet Must Balance","Income Statement Check","Board Minimum (Swedish law)"],"docs/GOLDEN_FORTRESS_SUMMARY.md":["\ud83c\udff0 GOLDEN FORTRESS - COMPLETE SYSTEM SUMMARY","For Future Claude: Everything You Need to Know","\ud83c\udfaf THE BIG PICTURE","System 1: Golden Orchestrator Pipeline (Local, Sept 2)","System 2: Twin-Pipeline (Production, Aug 28-31)","System 3: Golden Fortress (Unified, Sept 2)","\ud83d\udcda THE QUADRUPLE MDs (Card G4 Learning System)","MD1: Reinforced Learning Overview","MD2: Card G4 Implementation","MD3: Coaching Execution Guide"],"docs/M1_MAIDEN_VOYAGE.md":["\ud83d\udea2 M1: MAIDEN VOYAGE - FIRST PDF THROUGH CARD G4","Complete Testing, Logging, and Measurement Protocol","\ud83d\udccb **MISSION BRIEFING**","\ud83c\udfaf **WHAT WE'RE TESTING**","**1. System Components**","**2. Learning Phases**","**3. Agent Performance**","**4. Coaching Mechanics**","\ud83d\udcca **WHAT WE'RE MEASURING**","**Performance Metrics**"],"docs/MD1_GOLDEN_FORTRESS_OVERVIEW.md":["\ud83d\udcdc MD1: GOLDEN FORTRESS OVERVIEW - THE COMPLETE PICTURE","Start Here After Context Reset - Everything You Need to Know","\ud83c\udfaf THE MISSION","What We're Building:","\ud83c\udff0 THE GOLDEN FORTRESS ARCHITECTURE","System 1: Golden Orchestrator Pipeline","System 2: Twin-Pipeline (Production)","System 3: Golden Fortress (Unified)","\ud83e\udde0 CARD G4 REINFORCED LEARNING","Phase 1: Exploration (PDFs 1-50)"],"docs/MD2_H100_DEPLOYMENT_GUIDE.md":["\ud83d\udcdc MD2: H100 DEPLOYMENT GUIDE - RUNNING THE SYSTEM","Complete Instructions for H100 Deployment and Testing","\ud83c\udfaf H100 INFRASTRUCTURE","The H100 Server","SSH Access","Connect to H100","With tunnel for local access to database","\ud83d\ude80 DEPLOYMENT STEPS","Step 1: Check Current Status","SSH to H100"],"docs/MD3_CARD_G4_IMPLEMENTATION.md":["\ud83d\udcdc MD3: CARD G4 IMPLEMENTATION - THE LEARNING ENGINE","Complete Guide to the Reinforced Learning System","\ud83c\udfaf WHAT IS CARD G4?","Core Concepts:","\ud83c\udfd7\ufe0f ARCHITECTURE","The Complete System","\ud83d\udcca THE 4-PHASE JOURNEY","Phase 1: EXPLORATION (PDFs 1-50)","Phase 2: OPTIMIZATION (PDFs 51-150)","Phase 3: CONVERGENCE (PDFs 151-200)"],"docs/MD4_PRODUCTION_OPERATIONS.md":["\ud83d\udcdc MD4: PRODUCTION OPERATIONS - DAILY WORKFLOWS","Running, Monitoring, and Maintaining the Golden Fortress","\ud83c\udfaf PRODUCTION OVERVIEW","System Status Dashboard","Quick health check","Key Metrics","\ud83d\ude80 DAILY OPERATIONS","Morning Startup Routine","1. SSH to H100","2. Source environment"],"docs/ORCHESTRATOR_WITH_SUPPLIERS.md":["\ud83c\udfaf FINAL ORCHESTRATOR DESIGN - 16 PERFECT AGENTS","Executive Summary","\ud83d\udcca Agent Distribution","Total: 16 Essential Agents","Removed Non-Essential Agents:","\ud83d\udd04 H100 Execution Batches (Max 4 Parallel)","Batch 1 (Priority 1 - Core Financials)","Batch 2 (Priority 2 - Property & Overview)","Batch 3 (Priority 2 - Notes & SUPPLIERS)","Batch 4 (Priority 3 - Analysis & Audit)"]},"deps":{"agents/agent_loader.py":["json","os","typing","datetime"],"agents/golden_agents.py":["os","json"],"coaching/batch_phase1.py":["os","sys","json","time","psycopg2","datetime","typing","orchestrator.golden_orchestrator","pipeline.prod"],"coaching/card_g4_reinforced_coach.py":["json","hashlib","time","os","typing","datetime","numpy","dataclasses","psycopg2","psycopg2.extras","google.generativeai"],"coaching/card_g4_reinforced_coach_fixed.py":["json","hashlib","time","os","typing","datetime","numpy","dataclasses","psycopg2","psycopg2.extras","google.generativeai"],"coaching/coaching_monitor.py":["os","sys","psycopg2","datetime","typing","time"],"coaching/test_coaching_integration.py":["os","sys","json","datetime","orchestrator.golden_orchestrator","coaching.card_g4_reinforced_coach","coaching.card_g4_reinforced_coach","orchestrator.golden_orchestrator","coaching.card_g4_reinforced_coach"],"final_verification.py":["sys","os","json","sectionizer.golden_sectionizer","orchestrator.golden_orchestrator","agents.agent_loader"],"h100_native_maiden_voyage.py":["os","sys","json","time","logging","psycopg2","psycopg2","datetime","pathlib","typing","traceback","coaching.card_g4_reinforced_coach_fixed"],"m1_golden_fortress_voyage.py":["os","sys","time","json","logging","traceback","datetime","pathlib","typing","sectionizer.golden_sectionizer","torch","transformers","psycopg2","coaching.card_g4_reinforced_coach_fixed","agents.golden_agents","orchestrator.golden_orchestrator","src.orchestrator.coaching_orchestrator"],"m1_maiden_voyage.py":["os","sys","time","json","logging","psutil","traceback","datetime","pathlib","typing","psycopg2","orchestrator.golden_orchestrator","sectionizer.golden_sectionizer","psycopg2"],"m1_unified_voyage.py":["os","sys","json","time","logging","datetime","pathlib","typing","sectionizer.golden_sectionizer","json","src.coaching.card_g4_reinforced_coach_fixed","src.orchestrator.unified_coach"],"orchestrator/golden_orchestrator.py":["json","hashlib","os","typing","datetime","coaching.card_g4_reinforced_coach","sectionizer.golden_sectionizer"],"run_golden_pipeline.py":["sys","os","tests.golden_mega_test"],"sectionizer/golden_sectionizer.py":["json","typing"],"sectionizer/golden_two_pass_sectionizer.py":["os","sys","json","re","logging","psycopg2","datetime","typing","agents.qwen_agent","fitz"],"tests/comprehensive_test.py":["json","sys","typing","enhanced_sectionizer_with_suppliers","intelligent_learning_orchestrator","intelligent_learning_orchestrator","intelligent_learning_orchestrator","intelligent_learning_orchestrator"],"tests/golden_mega_test.py":["json","time","sys","os","datetime","logging","sectionizer.golden_sectionizer","orchestrator.golden_orchestrator","orchestrator.golden_orchestrator","orchestrator.golden_orchestrator","orchestrator.golden_orchestrator","sectionizer.golden_sectionizer","orchestrator.golden_orchestrator"],"tests/test_card_g4_comprehensive.py":["os","sys","json","unittest","unittest.mock","datetime","tempfile","psycopg2","psycopg2.extras","numpy","coaching.card_g4_reinforced_coach","time","sys","orchestrator.golden_orchestrator"]},"dir_purposes":{"docs":"Project documentation","coaching":"Test files and test utilities","tests":"Test files and test utilities"},"staleness":1756280864.814171}